import requests
import datetime
import json
import random
import warnings
import os
import threading
from colorama import Fore, init

init()

def warn(*args, **kwargs):
    pass

warnings.warn = warn

class Library:
    Name = "GHB"

    @staticmethod
    def read_json(filename, key):
        with open(filename, "r") as file:
            data = json.load(file)
        return data[key]

    @staticmethod
    def print_message(message, mode=None, title=None):
        hour = int(datetime.datetime.now().strftime("%H")) - 12
        minute = int(datetime.datetime.now().strftime("%M"))
        minute = f"0{minute}" if len(str(minute)) < 2 else str(minute)

        if mode:
            if str.lower(mode) == "warning":
                theme = Fore.YELLOW
                title = "WARNING"
            elif str.lower(mode) == "error":
                theme = Fore.LIGHTRED_EX
                title = "ERROR"
            else:
                theme = Fore.LIGHTBLUE_EX
                title = Library.Name
        else:
            theme = Fore.LIGHTBLUE_EX
            title = Library.Name

        if title is not None:
            title = title

        time_str = f"{hour}:{minute}".replace("-", "")

        callback = print(f"  {Fore.WHITE}{time_str}{Fore.RESET} | {theme}{title}{Fore.RESET} | {Fore.LIGHTWHITE_EX}{message}{Fore.RESET}")

        return callback

    @staticmethod
    def get_input(message, mode=None, title=None):
        hour = int(datetime.datetime.now().strftime("%H")) - 12
        minute = int(datetime.datetime.now().strftime("%M"))
        minute = f"0{minute}" if len(str(minute)) < 2 else str(minute)

        if mode:
            if str.lower(mode) == "warning":
                theme = Fore.YELLOW
                title = "WARNING"
            elif str.lower(mode) == "error":
                theme = Fore.LIGHTRED_EX
                title = "ERROR"
            else:
                theme = Fore.LIGHTBLUE_EX
                title = Library.Name
        else:
            theme = Fore.LIGHTBLUE_EX
            title = Library.Name

        if title is not None:
            title = title

        time_str = f"{hour}:{minute}".replace("-", "")

        callback = input(f"  {Fore.WHITE}{time_str}{Fore.RESET} | {theme}{title}{Fore.RESET} | {Fore.LIGHTWHITE_EX}{message}{Fore.RESET}: ")

        return callback

    @staticmethod
    def valid_token(token):
        user = requests.get("https://discordapp.com/api/v9/users/@me", headers={
            "authorization": token
        })

        if user.ok:
            return [True, user]
        else:
            return [False, None]

Token = Library.read_json("./Data.json", "discordToken")

if Library.valid_token(Token)[0]:
    user = Library.valid_token(Token)[1].json()
    name = user["username"]
    discriminator = user["discriminator"]
    username = f"{name}#{discriminator}"
    regions = ['us-west', 'us-east', 'us-central', 'us-south', 'singapore', 'southafrica', 'sydney', 'rotterdam', 'brazil', 'hongkong', 'russia', 'japan', 'india', 'south-korea']
    hopped = 0

    requests.post("https://discord.com/api/v9/invites/2yaQruTAgk", headers={
        "authorization":  Token,
        "user-agent": Library.Name
    })

    os.system("cls")
    os.system("title " + f"{Library.Name} * Client: ({username})")

    def hop_regions(token, channel_id):
        global hopped

        request = requests.patch(f"https://discord.com/api/v9/channels/{channel_id}/call",
            json={
                "region": random.choice(regions)
            },
            headers={
                "authorization":  token,
                "user-agent": Library.Name
            }
        )

        if request.ok:
            hopped += 1
            os.system("cls")

            Library.print_message(f"Swapped Servers : VC Reconnection Triggered : {hopped}", "normal")
            Library.print_message(f"Module Activity : True", "normal")

            os.system("title " + f"{Library.Name} * Client: ({username}) * {hopped}")

    def start():
        global channel_id

        while True:
            hop_regions(Token, channel_id)

    Library.print_message("Loaded Modules. You're all Set", "normal")

    channel_id = Library.get_input("Channel ID (Servers do not function)")
    threads = int(Library.get_input("Threads (Max 5 : Min 1)"))

    if threads > 5 or threads < 1:
        threads = 5

    for _ in range(threads):
        threading.Thread(target=start).start()
else:
    Library.print_message("Failed to Login : Invalid Token (Go to ./Data.json)")
    input("Press Enter to close.. >")
